/** @file example_module_main.c
 *
 *  This file defines the actual implementation of the functions for 
 *  example_module.
 */

	.include "dsplib/os_asm.h" # include the definition of ROM functions and OS global variables
	.include "example_module_mcv.h"
	//.include "processing.a"
	.extern _processing
	.public _limiterThreshold
	.public _variableGain
	.public _stage_two_gain
	.public _mode
	.public example_module_MCV
#	.public _variablesGain

  
####################### MCV #########################
# The module control vector is a set of Y data variables
# that can be accessed through host communication.
#
example_module_Y_Segment	.ydata_ovly
	.public example_module_HOST_MCV
example_module_HOST_MCV MCV_T(.streval(STRUCTURE_INITIALIZATION_STRNG))

#-------------------- end of MCV ---------------------

# Copy of MCV in Xmem
example_module_X_Segment	.xdata_ovly
example_module_MCV	MCV_T		# This is a copy of MCV used by algorithm

#_x_historyLs	.bsc(2), (0)
#_y_historyLs	.bsc(2), (0)
#_x_historyLfe	.bsc(2), (0)
#_y_historyLfe	.bsc(2), (0)

#_HPF5kHz .dw (0.33063278670382765), (-0.66126557340765530), (0.33063278670382765), (0.5), (-0.58506847445620070), (0.23746267235911003) 
#_LPF800Hz .dw  (0.00149685338594683095), (0.00299370677189366190), (0.00149685338594683095), (0.5), (-0.9195583986626017000), (0.42556417062298607000)
	


#DSPfract stage_two_gain = FRACT_NUM(0.794328);	// -2dB for C and LFE channel
_stage_two_gain .dw (0.794328)
#DSPfract variableGain = FRACT_NUM(0.630957);   // default -4db
_variableGain .dw (0.630957)
#DSPfract variableGain = FRACT_NUM(1.000000);
#_variableGain .dw 1.0000000
#DSPfract limiterThreshold = FRACT_NUM(0.999);
_limiterThreshold .dw (0.999)
_mode .dw (3)

example_module_MCV_end

	.code_ovly
##################################################################################
## Called from the Brick or Foreground ISR whenever there 
## is one or more bricks of unprocessed PCM in the IO Buffer.
##
## This function can process only one brick of any channel, but all channels are available
##
## This function is inherently an in-place processor -- the input data and output
## data are in the same IO buffer.
##
## There is an array of I/O buffer pointers, located at YMEM addresses ___X_BY_IOBUFFER_PTRS
## These pointers will point at block N for all channels when this function is 
## called.
#################################################################################
	.public X_S_example_module_Brick
X_S_example_module_Brick:

	a0 = xmem[example_module_MCV.enable]
	a0&a0	# check to see if we're enabled
	if(a == 0) jmp X_S_example_module_Brick_Done
		# signalProcessing(sampleBuffer, sampleBuffer);
		i0 = ymem[___X_BY_IOBUFFER_PTRS] # get L channel ptr
	 	i1 = ymem[___X_BY_IOBUFFER_PTRS]
	 	call _processing:
# end of brick function
X_S_example_module_Brick_Done:
  ret

###############################################################################
## Called from the Brick or Foreground ISR
## This function gets called on frame boundaries (integer multiples of sample-blocks)
##   Example 1:  AAC Frame-size is 1024 samples
##   Example 2:  Our PCM frame-size was chosen to be 256 samples
##
## Use this as another place to act on MCV changes.  This is called more often than
## the Timer functions, but is only called when the DAO clocks are active (only an issue 
## with Decoder chips)
###############################################################################
	.public X_S_example_module_Frame
X_S_example_module_Frame:
#   <your code here>
X_S_example_module_Frame_done:
  ret           


###############################################################################
## Called from the Brick or Foreground ISR
## Called only when the Timer flag is set (gets set by the Timer ISR)
## Use this to act on MCV changes when the block and frame functions are not being called,
## e.g. when there is no input audio signal.
###############################################################################
	.public X_S_example_module_Timer
X_S_example_module_Timer:
#   <your code here>
X_S_example_module_Timer_done:
  ret

###############################################################################
## Called from an infinite-loop in the main body of the OS code
## Can be interrupted, so exercise caution when using global vars that are 
## used in the foreground ISR
###############################################################################
	.public X_S_example_module_Background
X_S_example_module_Background:

# SAMPLE CODE:
#	MCV used as a shadow copy on host MCV
#   This code will copy module_test_HOST_MCV to module_test_MCV
	i0 = (example_module_HOST_MCV)
	i1 = (example_module_MCV)
	nm0 = (1)
	nm1 = (1)
	do(sizeof(MCV_T)), >
		a0 = ymem[i0]; i0 += n
%:		xmem[i1] = a0; i1 += n

#   <your code here>
X_S_example_module_Background_Done:
  ret

##################################################################################
## Called from the Brick or Foreground ISR
## Used for requesting memory from the heap
## Called immediately after the frame functions are called and immediately prior 
## to the PostMalloc functions.
##
## This function is only called if one or more modules set the X_VX_NextFrm_Reinit_Req 
## flag (in the Frame function).
## When this happens, all modules' PreMalloc functions get called so that each module 
## has the chance to ask for heap memory.
## 
## If this function gets called, the OS has already freed all of the heap, and all heap-using modules
## MUST request heap again.
##
## Examples of Heap Requests:
## 
#####  Example 1:  Request 512 words from XMEM
#####  i0 = (VX_Buffer_0_Ptr) ### Os place the address of the malloced RAM in this var in XRAM
#####  uhalfword(x0) = (0x200)
#####  call cl_mallocX

#####  Example 2:  Request 768 words from YMEM
#####  i0 = (VX_Buffer_1_Ptr) ### Os place the address of the malloced RAM in this var in XRAM
#####  uhalfword(x0) = (0x300)
#####  call cl_mallocY

#####  Example 3:  Request 512 of words from XMEM aligned to a modulo boundary
#####  i0 = (VX_Buffer_2_Ptr) ### Os place the address of the malloced RAM in this var in XRAM
#####  uhalfword(x0) = (0x200)
#####  call cl_mallocModX

#####  Example 4:  Request 64 words from LMEM aligned to a modulo boundary
#####  i0 = (VX_Buffer_3_Ptr) ### Os place the address of the malloced RAM in this var in XRAM
#####  uhalfword(x0) = (64)
#####  call cl_mallocModL

### There are 6 types of malloc requests: X, Y, L modulo and non-modulo
### Mallocation is all or nothing.  If there is not enough available heap to accomodate
### the entire set of requests, the systems halts.

### If the Malloc succeeds, the OS calls the Post Malloc functions.
#################################################################################
	.public X_S_example_module_PreMalloc
X_S_example_module_PreMalloc:
#   <your code here>
X_S_example_module_PreMalloc_Done:
  ret

##################################################################################
## Called from the Brick or Foreground ISR
## Called if the mallocations requested by the modules' Pre-Mallocs succeeds
## This gives the module designer a chance to act upon the newly acquired buffers
## if so desired.  For example, a malloced example_module-filter history-buffer should be 
## cleared here.
##
## This function is also a good place to set a malloc-success flag for the benefit
## of the Block function.  That is, the Block function should never try to operate on
## a buffer that has not yet been malloced
#################################################################################
	.public X_S_example_module_PostMalloc
X_S_example_module_PostMalloc:
#   <your code here>
X_S_example_module_PostMalloc_Done:
  ret

###############################################################################
## Unconditional initializations (i.e., vars whose values don't depend on MCV)
## This function gets called before the KickStart message is received and acted-on
## Called only when the OS re-boots
###############################################################################
	.public X_S_example_module_PreKickstart
X_S_example_module_PreKickstart:
#   <your code here>
X_S_example_module_PreKickstart_done:
  
  ret


###############################################################################
## Unconditional initializations (i.e., vars whose values don't depend on MCV)
##    OR
## Conditional initializations (i.e., vars whose values depend on MCV)
##
## This function gets called immediately after the KickStart message is received
## by the OS and acted-on (i.e., prior to any other Framework Entry-point).
##
## This function also gets called upon App-Restart (which happens after recovering 
## from an audio under-flow).
##
## This function gets called before any block-processing functions are called.
##
## An example of the kind of initialization that must happen here would be any 
## filter state that must be cleared prior to starting audio again. 
###############################################################################
	.public X_S_example_module_PostKickstart
X_S_example_module_PostKickstart:
#   <your code here>
	a0 = xmem[_variableGain]
	ymem[example_module_HOST_MCV.G1] = a0
	xmem[example_module_MCV.G1] = a0
	
	a0 = xmem[_stage_two_gain]
	ymem[example_module_HOST_MCV.G2] = a0
	xmem[example_module_MCV.G2] = a0
X_S_example_module_PostKickstart_done:
                     
  ret
